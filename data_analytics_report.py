# -*- coding: utf-8 -*-
"""Data Analytics Report

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MvkV5nuO6r-TNQmMG5ZiD9UDImZ_dAz_

## Introduction


This project examines the determinants of interest rates in the consumer credit market using data from Lending Club, a leading peer-to-peer lending platform. The dataset consists of 10,000 loan records, each representing a distinct borrower and encompassing a wide range of variables, including verified income status, debt-to-income ratios, credit utilization, employment history, loan characteristics, and credit performance metrics. The objective of this analysis is to identify the key borrower and loan attributes that influence the interest rates assigned to individual loans. Through systematic exploration of the data, this project seeks to contribute to a deeper understanding of credit risk assessment and pricing mechanisms in the context of consumer lending.
"""



"""## 1. Part A: Data Preparation

### 1.1 Required Variables
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
!pip install stargazer
from stargazer.stargazer import Stargazer

df = pd.read_csv("/content/loans_dataset.csv")
df.head()

"""## A

"""

retained_variables = [ "interest_rate", "verified_income", "debt_to_income",
"total_credit_utilized", "total_credit_limit",
"public_record_bankrupt", "loan_purpose", "term",
"inquiries_last_12m", "issue_month", "annual_income",
"loan_amount", "grade", "emp_length", "homeownership"]

clean_df = df[retained_variables]
clean_df.head()

"""## B"""

clean_df= clean_df.rename(columns={"inquiries_last_12m": "credit_checks"})
clean_df.head()

"""## C"""

print(f"Number of observations before cleaning: {df.shape[0]}")

print(f"Number of observations after cleaning: {clean_df.shape[0]}")

print("Summary statistics of cleaned data:")
print(clean_df.describe().round(2))

# Generate summary statistics and save to CSV
summary_stats = clean_df.describe().round(2)
summary_stats.to_csv('summary_statistics.csv')

print("Summary statistics saved to 'summary_statistics.csv'")

"""## 2. PART B: Exploratory Data Analysis

### 2.1 Descriptive statistics.

## A
"""

# calculate mean, median, standard deviation, minimum and maximum for interest_rate
var_stats = ["interest_rate","annual_income", "debt_to_income", "loan_amount"]
describe_stats = pd.DataFrame({ "Mean": clean_df[var_stats].mean(),
                                "Median": clean_df[var_stats].median(),
                                "Standard deviation": clean_df[var_stats].std(),
                                "Minimum": clean_df[var_stats].min(),
                                "Maximum": clean_df[var_stats].max()
                                })

print("Descriptive statistics for interest_rate:")
print(describe_stats.round(2))

"""## B"""

# Unique Values and Frequencies for grade, verified_income and homeownership
grade_counts = clean_df["grade"].value_counts()
verified_income_counts = clean_df["verified_income"].value_counts()
homeownership_counts = clean_df["homeownership"].value_counts()

grade_counts = clean_df['grade'].value_counts().sort_index()
print(f"Unique values and frequencies for grade are as follows:\n{grade_counts}")

print (f"Unique values and frequencies for verified_income is as follows: {verified_income_counts}")

print (f"Unique values and frequencies for homeownership is as follows: {homeownership_counts}")

"""## 2.2 Data Visualizations

### a. Histograms
"""

# Create a histogram for the distribution of interest rate
plt.figure(figsize=(8, 6))
sns.histplot(clean_df["interest_rate"], bins=20, kde=True)
plt.xlabel("Interest Rate")
plt.ylabel("Frequency")
plt.title("Distribution of Interest Rate")
plt.show()

# Create a histogram for the distribution of annual income
plt.figure(figsize=(8, 6))
sns.histplot(clean_df["annual_income"], bins=20, kde=True)
plt.xlabel("Annual Income")
plt.ylabel("Frequency")
plt.title("Distribution of Annual Income")

"""## b. Scatterplots

"""

# Scatterplot for interest rate and annual income
plt.figure(figsize=(8, 6))
sns.scatterplot(data=clean_df, x="annual_income", y="interest_rate")
plt.title("Interest Rate vs. Annual Income")
plt.show()

# Scatterplot for interest rate and debt_to _income
plt.figure(figsize=(8, 6))
sns.scatterplot(data=clean_df, x="debt_to_income", y="interest_rate")
plt.title("Interest Rate vs. Debt to Income")
plt.show()

# Scatterplot of interest rate and debt to income with regression line
plt.figure(figsize=(8, 6))
sns.regplot(data=clean_df, x="debt_to_income", y="interest_rate")
plt.title("Interest Rate vs. Debt to Income with Regression Line")
plt.show()

"""## c. Box plots"""

# create a boxplot for interest rate by grade in aplhabetical order
plt.figure(figsize=(8, 6))
sns.boxplot(data=clean_df, x="grade", y="interest_rate", order=sorted(clean_df["grade"].unique()))

#create a boxplot for interest rate by verified income
plt.figure(figsize=(8, 6))
sns.boxplot(data=clean_df, x="verified_income", y="interest_rate")

#create a boxplot for interest rate by homeownership.
plt.figure(figsize=(8, 6))
sns.boxplot(data=clean_df, x="homeownership", y="interest_rate")

"""## 2.3 Derived Variables.

#### a. credit util = total credit utilized / total credit limit
Set to 0 if total credit limit is 0
"""

clean_df['credit_util'] = np.where(clean_df['total_credit_limit'] == 0,0,clean_df['total_credit_utilized'] / clean_df['total_credit_limit'])
clean_df['credit_util'].head()

print("\nMean of credit util:", clean_df['credit_util'].mean())
print("Proportion of non-zero credit util:", (clean_df['credit_util'] != 0).mean())

"""#### b. bankruptcy dummy"""

clean_df['bankruptcy_dummy'] = np.where(clean_df['public_record_bankrupt'] >= 1,1,0)
clean_df['bankruptcy_dummy'].head()

print("\nMean of bankruptcy dummy:", (clean_df['bankruptcy_dummy'].mean()))
print("Proportion of bankruptcies:", (clean_df['bankruptcy_dummy'] == 1).mean())

"""# 3. Regeression Analysis

### Part B: Regression Analysis

#### 3.1 Models

##### (a) Model 1: Simple Linear Regression

• Estimate:
interest rate = β0 + β1 debt to income + ε

• Report regression equation with estimated coefficients

• Interpret the coefficient β1 in the model

• Test H0 : β1 = 0 at α = 0.01, 0.05, 0.1 significance levels
"""

import statsmodels.api as sm
import statsmodels.formula.api as smf

model1 = smf.ols('interest_rate ~ debt_to_income', data=clean_df).fit()
print(model1.summary())

# create a regression table for model1
table1 = Stargazer([model1])
table1.rename_covariates({"Intercept": "Constant"})
table1.custom_columns(["Homoskedastic SE"],[1])
table1

html = table1.render_html()
with open("my_regression_table.html", "w") as f:
     f.write(html)

#open('lin_reg.html','w').write(table.render_html())

"""### b. Model 2: Simple Linear Regression.
 ### Estimate:
###interest rate = β0 + β1 bankruptcy dummy + ε
###• Interpret the coefficient β1 in the model
###• Test H0 : β1 = 0 at α = 0.01, 0.05, 0.1 significance levels
"""

# create bankruptcy_dummy
clean_df['bankruptcy_dummy'] = np.where(clean_df['public_record_bankrupt'] >= 1,1,0)

model2 = smf.ols('interest_rate ~ bankruptcy_dummy', data=clean_df).fit()
print(model2.summary())

# create a regression table for model2
table2 = Stargazer([model2])
table2.rename_covariates({"Intercept": "Constant"})
table2.custom_columns(["Homoskedastic SE"],[1])
table2

html = table2.render_html()
with open("my_regression_table.html", "w") as f:
     f.write(html)

#open('lin_reg.html','w').write(table.render_html())

"""### c. Multiple Linear Regression.
###Create dummy variables for verified income (specify reference category)
###• Estimate:
###interest rate = β0 + β1D1 + β2D2 + ε
###where D1, D2 are dummy variables for verif ied income
###• Compute the average interest rate for borrowers whose income source and amount are both unverified
###• Interpret coefficients
"""

# check unique variables for verified income
clean_df['verified_income'].unique()

model3 = smf.ols('interest_rate ~ C(verified_income, Treatment(reference="Not Verified"))', data=clean_df).fit()
print(model3.summary())

# create a regression table for model3
table3 = Stargazer([model3])
table3.rename_covariates({"Intercept": "Constant"})
table3.custom_columns(["Homoskedastic SE"],[1])
table3

html = table3.render_html()
with open("my_regression_table.html", "w") as f:
     f.write(html)

#open('lin_reg.html','w').write(table.render_html())

"""### d. Multiple Linear Regression.
###Estimate:
###interest rate = β0 + β1 debt to income + β2 credit util + β3 bankruptcy dummy + ε
###• Compare with Model 1 and Model 2 results.
###• Interpret coefficients
"""

# create credit_util
clean_df['credit_util'] = np.where(clean_df['total_credit_limit'] == 0,0,clean_df['total_credit_utilized'] / clean_df['total_credit_limit'])

model4 = smf.ols('interest_rate ~ debt_to_income + credit_util + bankruptcy_dummy', data=clean_df).fit()
print(model4.summary())

# create a regression table for model 4
table4 = Stargazer([model4])
table4.rename_covariates({"Intercept": "Constant"})
table4.custom_columns(["Homoskedastic SE"],[1])
table4

html = table4.render_html()
with open("my_regression_table.html", "w") as f:
     f.write(html)

#open('lin_reg.html','w').write(table.render_html())

# create a table for model 1, model 2 and model 4.

table = Stargazer([model1, model2, model4])
table.rename_covariates({"Intercept": "Constant"})
table.custom_columns(["Model 1", "Model 2", "Model 3"], [1, 1, 1])
table

html = table.render_html()
with open("my_regression_table.html", "w") as f:
     f.write(html)

#open('lin_reg.html','w').write(table.render_html())

"""### e. Enhanced Multiple Linear Regression.
###• Add these variables to Model 4:
###annual income, loan amount, term, grade, emp length, homeownership, loan purpose, credit checks
###• Create appropriate dummy variables (k − 1 for k categories)
###• State reference categories
###• Use term as dummy variable
###• Compute and report the residuals for the first five observations
"""

clean_df['credit_util'] = clean_df['total_credit_utilized'] / clean_df['total_credit_limit'].replace(0, 1)
clean_df['bankruptcy_dummy'] = (clean_df['public_record_bankrupt'] >= 1).astype(int)

cat_vars = ['term', 'grade', 'homeownership', 'loan_purpose']
df_model5 = pd.get_dummies(clean_df, columns=cat_vars, drop_first=True)

predictors = [
    'debt_to_income', 'credit_util', 'bankruptcy_dummy',
    'annual_income', 'loan_amount', 'emp_length', 'credit_checks'
]

dummy_cols = [col for col in df_model5.columns if any(prefix in col for prefix in ['term_', 'grade_', 'homeownership_', 'loan_purpose_'])]
X_cols = predictors + dummy_cols

df_model5_clean = df_model5.dropna(subset=X_cols + ['interest_rate'])

X = sm.add_constant(df_model5_clean[X_cols].astype(float))
y = df_model5_clean['interest_rate'].astype(float)

model5 = sm.OLS(y, X).fit()

print(model5.summary())
print("\nFirst 5 residuals:")
print(model5.resid[:5])

# create a regression table for model 5
table5 = Stargazer([model5])
table5.rename_covariates({"Intercept": "Constant"})
table5.custom_columns(["Homoskedastic SE"], [1])
table5

html = table5.render_html()
with open("my_regression_table.html", "w") as f:
     f.write(html)

#open('lin_reg.html','w').write(table.render_html())

# predicted values from Model 5
predicted = model5.predict()

# residuals
residuals = model5.resid

# print the first 5 residuals
print("First 5 residuals (actual - predicted):")
print(residuals.head().round(2))

"""### 3.2. Result Presentation.
###Present all regression results in one table:
###• Columns for Models 1-5
###• Coefficients with standard errors in parentheses
###• Significance levels: * p < 0.1, ** p < 0.05, *** p < 0.01
###• R2, number of observations, F-statistics• R2, number of observations, F -statistics


"""

# create table6
table6 = Stargazer([model1, model2, model3, model4, model5])
table6.rename_covariates({"Intercept": "Constant"})
table6.custom_columns(["Homoskedastic SE"], [5])

html_table = table6.render_html()

from IPython.core.display import display, HTML
display(HTML(html_table))

with open("regression_table6.html", "w") as f:
    f.write(html_table)